<jittershader name="biocell">
    <description>
    http://glslsandbox.com/e#28867.0
    </description>
    <param name="time" type="float" default="1." />
    <param name="resolution" type="vec2" default="1. 1." />
    <param name="gain" type="float" default=".5" />
    <param name="vl1" type="vec4" default="0. 0. 0. 0" />
    <param name="sl1" type="vec4" default="0. 0. 0. 0" />
    <language name="glsl" version="1.2">
        <bind param="time" program="fp" />
        <bind param="resolution" program="fp" />
        <bind param="gain" program="fp" />
        <bind param="vl1" program="fp" />
        <bind param="sl1" program="fp" />
        <program name="vp" type="vertex" source="sh.passthru.xform.vp.glsl" />
        <program name="fp" type="fragment">
<![CDATA[

#version 120
#ifdef GL_ES
precision mediump float;
#endif
// variables
uniform float time;
uniform vec2 resolution;
uniform float gain;
uniform vec4 vl1;
uniform vec4 sl1;

float snoise(vec3 uv, float res)
{
    const vec3 s = vec3(1e0, 1e2, 1e3);

    uv *= res;

    vec3 uv0 = floor(mod(uv, res))*s;
    vec3 uv1 = floor(mod(uv+vec3(1.), res))*s;

    vec3 f = fract(uv); f = f*f*(3.0-2.0*f);

    vec4 v = vec4(uv0.x+uv0.y+uv0.z, uv1.x+uv0.y+uv0.z,
                    uv0.x+uv1.y+uv0.z, uv1.x+uv1.y+uv0.z);

    vec4 r = fract(sin(v*1e-1)*1e3);
    float r0 = mix(mix(r.x, r.y, f.x), mix(r.z, r.w, f.x), f.y);

    r = fract(sin((v + uv1.z - uv0.z)*1e-1)*1e3);
    float r1 = mix(mix(r.x, r.y, f.x), mix(r.z, r.w, f.x), f.y);

    return mix(r0, r1, f.z)*2.-1.;
}

void main(  )
{
    float _gain = gain;
    vec4 _sl1 = sl1;
    vec4 _vl1 = vl1;

    vec2 p1 = -0.5 + gl_FragCoord.xy / resolution.xy;
    p1.x *= resolution.x/resolution.y;

    vec2 p2 = -0.5 + gl_FragCoord.xy / resolution.xy;
    p2.x *= resolution.x/resolution.y;
//===============================================

    float color1;
    if(length(2.*p1)<=0.8*gain){
        color1=0.;
    }
    else color1= 3.0 - ((2.+cos(time)*0.3)*length(2.*p1))*gain;

    float color2;
    if(length(2.*p2)>=0.8*gain||length(2.*p2)<=0.37*(0.5+gain)){
        color2=0.;
    }

    else color2= -3.0 + ((8.+sin(time*2.)*1.5)*length(2.*p2))*gain;
//===============================================

    vec3 coord1 = vec3(atan(p1.x,p1.y)/6.2832+.5, length(p1)*.4, .5);
    vec3 coord2 = vec3(atan(p2.x,p2.y)/6.2832+.5, 2.4-length(p2)*.4, .5);

//===============================================

    for(int i = 1; i <= 7; i++)
    {
        float power = pow(2.0, float(i)) * (1.1 - sl1.x);
        color1 += (1.5 / power) * snoise(coord1 + vec3(0.,-time*.05, time*.01), power*16.*(0.2+gain));
        color2 += (1.5 / power) * snoise(coord2 + vec3(0.,-time*.05, time*.01), power*16.*(0.25+gain));
    }
    gl_FragColor = vec4( max(pow(color2,2.)*1.,0.), pow(max(color1,0.),2.)*0.4+pow(max(color2,0.),2.)*0.3, color1, 1.0);
}

]]>
        </program>
    </language>
</jittershader>


