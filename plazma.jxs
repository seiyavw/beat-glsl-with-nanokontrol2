<jittershader name="biocell">
    <description>
    http://glslsandbox.com/e#29690.3
    </description>
    <param name="time" type="float" default="1." />
    <param name="resolution" type="vec2" default="1. 1." />
    <param name="gain" type="float" default=".5" />
    <param name="vl1" type="vec4" default="0. 0. 0. 0" />
    <param name="sl1" type="vec4" default="0. 0. 0. 0" />
    <language name="glsl" version="1.2">
        <bind param="time" program="fp" />
        <bind param="resolution" program="fp" />
        <bind param="gain" program="fp" />
        <bind param="vl1" program="fp" />
        <bind param="sl1" program="fp" />
        <program name="vp" type="vertex" source="sh.passthru.xform.vp.glsl" />
        <program name="fp" type="fragment">
<![CDATA[

#version 120
#ifdef GL_ES
precision mediump float;
#endif

#define pi 3.14159

uniform float time;
uniform vec2 resolution;
uniform float gain;
uniform vec4 vl1;
uniform vec4 sl1;

#define size 1.2
#define rotationspeed 0.5

vec2 rotate(in vec2 v, in float angle)
{
  float ca = cos(angle);
  float sa = sin(angle);
  return vec2( ca*v.x + sa*v.y, -sa*v.x + ca*v.y);
}

vec3 mix(vec3 x, vec3 y, float a) {
    return x * (1.0 - a) + y * a;
}

void main(void)
{
    vec4 _vl1 = vl1;
    vec4 _sl1 = sl1;

    float tm = time * (1.0 + sl1.x * 3.0);

    vec2 mouse = vec2(gain, gain);
    vec2 p = gl_FragCoord.xy / resolution.xy;
    vec4 dmin = vec4(1000.);
    vec2 z = (1.6*p - 0.8)*vec2(resolution.x/resolution.y,1.0)*(size+mouse.y);
    z = rotate(z, rotationspeed * sin(tm) - 0.15);

    float w = .1 * p.x * p.y;
    vec2 op = 1.-p;
    float d = 1.5+0.3*cos(tm*3.0)+0.2*cos(tm*8.0)+0.1*cos(tm*12.0);
    vec2 mv = ((mouse-vec2(d))+vec2(1.-acos(op.x*w),1./acos(op.y*w)));
    for( int i=0; i<8; i++ )
    {
        if (sl1.z == 0.0) {
            z = mv + vec2(z.x*z.x-z.y*z.y, 2.0*z.x*z.y) * (1.0 * (1.0 - sl1.y) + gain);
        }
        mv /= (dmin.x+dmin.y);//10.5;
        z += z*.5;
        dmin=min(dmin, vec4(abs(0.0+z.y+0.5*sin(z.x+tm*5.))
                   ,abs(1.0+z.x+0.5*sin(z.y+tm))
                   ,dot(z,z)
                   ,length(fract(z)-0.5)))*(1.0 - vl1.x);
    }
    vec3 color = vec3( dmin.w );
    color = mix( color, vec3(1.00,0.80,0.60),     min(1.0,pow(dmin.x*0.25,0.20)) );
    color = mix( color, vec3(0.72,0.70,0.60),     min(1.0,pow(dmin.y*0.50,0.50)) );
    color = mix( color, vec3(1.00,1.00,1.00), 1.0-min(1.0,pow(dmin.z*1.00,0.15) ));
    color = 1.5*color*color;
    color *= 0.5 + 0.5*pow(16.0*p.x*(1.0-p.x)*p.y*(1.0-p.y),0.15);
    gl_FragColor = vec4(1.0-color.rgb*(0.5 + 0.5*pow(16.0*p.x*(1.0-p.x)*p.y*(1.0-p.y),1.5)),1.0);
}

]]>
        </program>
    </language>
</jittershader>


